#!/usr/bin/python3
import numpy
import scipy
from decimal import *
import sys
import pdb
import f90nml

def main():
  global dtype
  global NORB
  global dic
  global NELECd
  global NELECs
  global NELECe
  global H
  global E_nucc
  dtype=numpy.dtype(numpy.float64)
  z0=numpy.float64(0)
  z05=numpy.float64(0.5)
  z2=numpy.float64(2)
  NORB, NELEC, E_nucc, H, dic, nml = init()
  iters=1
  E_0_old=z0
  E_old=z0
  old_ener=0

  NELECd=int(sys.argv[3])
  NELECs=int(sys.argv[4])
  NELECe=NORB-NELECd-NELECs
  print('NELECd=',NELECd,'NELECs=',NELECs,'NELECe=',NELECe,'NORB=',NORB)



  while True:
    if iters==1:
      DSE=numpy.identity(NORB)
      D=DSE[:,:NELECd]
      S=DSE[:,NELECd:NELECd+NELECs]
      E=DSE[:,NELECd+NELECs:NELECd+NELECs+NELECe]
      DE=numpy.zeros((NORB,NELECd+NELECe))
      DS=numpy.zeros((NORB,NELECd+NELECs))
      SE=numpy.zeros((NORB,NELECs+NELECe))
      Fse=numpy.zeros((NORB,NORB))
      Fde=numpy.zeros((NORB,NORB))
      Pd=numpy.zeros((NORB,NORB))
      Ps=numpy.zeros((NORB,NORB))
      for a in range (NELECd):
        Pd[a,a]=2
      for b in range (NELECs):
        Ps[b,b]=1
    
    Fde=numpy.subtract(numpy.add(H,coulombmatrix(numpy.add(Pd,Ps))),numpy.multiply(0.5,exchangematrix(numpy.add(Pd,Ps))))
    for j in range (NELECd):
      DE[:,j]=D[:,j]
    for m in range (NELECe):
      DE[:,m+NELECd]=E[:,m]
    FdeMO=numpy.matmul(numpy.matmul(numpy.transpose(DE),Fde),DE)
    valsDE,vecsDE=eigen(FdeMO)
    DE=numpy.matmul(DE,vecsDE)
    for j in range (NELECd):
      D[:,j]=DE[:,j]
    for m in range (NELECe):
      E[:,m]=DE[:,m+NELECd]
    ener=energy(NORB,E_nucc,H,Pd,Ps,Fde,Fse)
    print('ENERGY:',ener,'ITERATION:',iters)
    Pd=numpy.multiply(2,numpy.matmul(DE[:,:NELECd],numpy.transpose(DE[:,:NELECd])))
    
    Fse=numpy.subtract(numpy.add(H,coulombmatrix(numpy.add(Pd,Ps))),exchangematrix(numpy.add(numpy.multiply(0.5,Pd),Ps)))
    for j in range (NELECs):
      SE[:,j]=S[:,j]
    for m in range (NELECe):
      SE[:,m+NELECs]=E[:,m]
    FseMO=numpy.matmul(numpy.matmul(numpy.transpose(SE),Fse),SE)
    valsSE,vecsSE=eigen(FseMO)
    SE=numpy.matmul(SE,vecsSE)
    for j in range (NELECs):
      S[:,j]=SE[:,j]
    for m in range (NELECe):
      E[:,m]=SE[:,m+NELECs]
    Ps=numpy.matmul(SE[:,:NELECs],numpy.transpose(SE[:,:NELECs]))

    Fds=numpy.subtract(numpy.add(H,coulombmatrix(numpy.add(Pd,Ps))),exchangematrix(numpy.multiply(0.5,Pd)))
    for j in range (NELECd):
      DS[:,j]=D[:,j]
    for m in range (NELECs):
      DS[:,m+NELECd]=S[:,m]
    FdsMO=numpy.matmul(numpy.matmul(numpy.transpose(DS),Fds),DS)
    valsDS,vecsDS=eigen(FdsMO)
    DS=numpy.matmul(DS,vecsDS)
    for j in range (NELECd):
      D[:,j]=DS[:,j]
    for m in range (NELECs):
      S[:,m]=DS[:,m+NELECd]
    ener=energy(NORB,E_nucc,H,Pd,Ps,Fde,Fse)
    print('ENERGY:',ener,'ITERATION:',iters)
    Pd=numpy.multiply(2,numpy.matmul(DS[:,:NELECd],numpy.transpose(DS[:,:NELECd])))
    Ps=numpy.matmul(DS[:,NELECd:NELECd+NELECs],numpy.transpose(DS[:,NELECd:NELECd+NELECs]))

    if abs(old_ener-ener)<10**-6:break
    iters+=1
    old_ener=ener
    if iters>50:
      print('not converged')
      break
  DSE[:,:NELECd]=D
  DSE[:,NELECd:NELECd+NELECs]=S
  DSE[:,NELECd+NELECs:]=E
  print('finished calculating')    
  fcimaker(NORB, DSE, dic, H, nml)

def init():
    print('in init')
    twodictionary = {}
    onedictionary = {}
    with open(sys.argv[1]) as f:
        print('file opened')
        nml = f90nml.read(f)
        NORB = nml['fci']['NORB']
        NELEC = nml['fci']['NELEC']
        print('NORB=',NORB)
        print('read the namelist')
    f.close()
    with open(sys.argv[1]) as f:
        number=2
        while True:
            line = f.readline()
            number+=1
            if r'/' or '&END' is line:
                print('found the Namelist')
                break
        for line in f.readlines()[number:]:
            indizes = []
            for i in range(1, 5):
                indizes.append(int(line.split()[i]) - 1)
            if indizes[0] == indizes[1] == indizes[2] == indizes[3] == - 1:
                E_nucc = numpy.float64(line.split()[0])
            if indizes[2] == indizes[3] == - 1 and indizes[0] != -1 and indizes[1] !=-1:
                onedictionary[indizes[0], indizes[1], indizes[2], indizes[3]]\
                    = numpy.float64(line.split()[0])
            elif indizes[0]!=-1 and indizes[1]!=-1 and indizes[2]!=-1 and indizes[3]!=-1 :
                twodictionary[indizes[0], indizes[1], indizes[2], indizes[3]]\
                    = numpy.float64(line.split()[0])
    #twomatrix
    twomatrix = numpy.zeros((NORB, NORB, NORB, NORB))
    for key, value in twodictionary.items():
        my = key[0]
        ny = key[1]
        la = key[2]
        si = key[3]
        twomatrix[my, ny, la, si] = value
        twomatrix[ny, my, la, si] = value
        twomatrix[my, ny, si, la] = value
        twomatrix[ny, my, si, la] = value
        twomatrix[la, si, my, ny] = value
        twomatrix[si, la, my, ny] = value
        twomatrix[la, si, ny, my] = value
        twomatrix[si, la, ny, my] = value
    #H
    H = numpy.zeros((NORB, NORB))
    for my in range(NORB):
        for ny in range(my + 1):
            H[my, ny] = onedictionary[my, ny, - 1, - 1]
            H[ny, my] = H[my, ny]
    return(NORB, NELEC, E_nucc, H, twomatrix, nml)

def eigen(F):
  vals,vecs=numpy.linalg.eig(F)
  idx=vals.argsort()
  vals=vals[idx]
  vecs=vecs[:,idx]
  return vals,vecs


def coulombmatrix(P):
    c=numpy.tensordot(P,dic,((0,1),(2,3)))
    return c

def exchangematrix(P):
    e=numpy.tensordot(P,dic,((0,1),(1,2)))
    return e

def energy(NORB,E_nucc,H,Pd,Ps,Fde,Fse):
    E=0.5*(numpy.tensordot(Pd,numpy.add(H,Fde),((0,1),(0,1)))+numpy.tensordot(Ps,numpy.add(H,Fse),((0,1),(0,1))))+E_nucc
    return E

def fcimaker(NORB, DSE, dic, H, nml):
    dic_MO=numpy.tensordot(DSE,numpy.tensordot(DSE,numpy.tensordot(DSE,numpy.tensordot(DSE,dic,((0),(3))),((0),(2))),((0),(1))),((0),(0)))
    H_MO=numpy.tensordot(DSE,numpy.tensordot(DSE,H,((0),(1))),((0),(0)))
    fcidump = open(sys.argv[2], 'w')
    nml.write(fcidump)
    for I in range(1, NORB + 1):
        for J in range(1, I + 1):
            for K in range(1, I + 1):
                for L in range(1, K + 1):
                    if(I == K and J < L): continue
                    fcidump.write('{0:23.16E} {1:4d} {2:4d} {3:4d} {4:4d}'.format(dic_MO[I-1,J-1,K-1,L-1], I, J, K, L))
                    fcidump.write('\n')
    for I in range(1, NORB + 1):
        for J in range(1, I + 1):
            fcidump.write('{0:23.16E} {1:4d} {2:4d} {3:4d} {4:4d}'.format(H_MO[I-1,J-1], I, J, 0, 0))
            fcidump.write('\n')
    fcidump.write('{0:23.16E} {1:4d} {1:4d} {1:4d} {1:4d}'.format(E_nucc,0))
    fcidump.close()
    return

def outsqr(title,mat,width=15):
    frmt=''.join(['{:>',str(width),'.',str(max(width-7,0)),'f}'])
    ifrmt=''.join(['{:^',str(width),'d}'])
    headline=''.join([ifrmt.format(i) for i in range(len(mat)+1)])
    outline='\n'.join([''.join([ifrmt.format(i+1),''.join([frmt.format(val) for val in row])]) for i,row in enumerate(mat)])
    print ('\n'.join([title,headline,outline]))

if __name__=='__main__':
  main()
