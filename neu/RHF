#!/usr/bin/python3
import numpy
import scipy
from decimal import *
import sys
import pdb


def main():
  global dtype
  dtype = numpy.dtype(numpy.float64)
  z0 = numpy.float64(0)
  z05 = numpy.float64(0.5)
  z2 = numpy.float64(2)
  NORB,NELEC,E_nucc,onedictionary,twodictionary = dicfunction()
  NELEC+ = electroninp()
  iters = 0
  E_0_old = z0
  E_old = z0
  dic = dicmatrix(NORB,twodictionary)
  H = hmatrix(NORB,onedictionary)

  print(NELEC,NORB)
  if NELEC/2>NORB:
    print('NOCC>NORB')
    sys.exit()
  if NELEC%2! = 0:
    print('odd number of electrons. use UHF')
    sys.exit()
  if NELEC<0:
    print('NELEC<0')
    sys.exit()

  while True:
    if iters ==0:
      P = numpy.zeros((NORB,NORB),dtype)
      for x in range(int(NELEC/2)):
        P[x,x] = z2
    else:
      P = pmatrix(NORB,NELEC,vecs)
    if iters>0:
      E = energy(NORB,E_nucc,P,H,F)
      print ('trace(F)',numpy.trace(F),'iteration:',iters,'Energy:',E)
    c = coulombmatrix(NORB,dic,P)
    e = exchangematrix(NORB,dic,P)
    G = c-e
    F = H+G
    vals,vecs = eigen(F)
    #E = energy(NORB,E_nucc,P,H,F)
    #print ('trace(F)',numpy.trace(F),'iteration:',iters,'Energy:',E)
    #if abs(E_old-E)<10**-8:break
    #E_old = E
    iters+ = 1
    if iters>5: break
  print('finished')    
  #fcimaker(NORB,vecs,dic)

def dicfunction():
  twodictionary = {}
  onedictionary = {}
  with open (sys.argv[1]) as f:
    line = f.readline()
    line = line.strip()
    NORB = line.split('NORB=')[1]
    NORB = int(NORB.split(',')[0])
    NELEC = line.split('NELEC=')[1]
    NELEC = int(NELEC.split(',')[0])
    for dummy in range(1,4):
      next(f)
    for line in f:
      indizes = []
      for i in range(1,5):
        indizes.append(int(line.split()[i])-1)
      if indizes[0] ==indizes[1]==indizes[2]==indizes[3]==-1:
        E_nucc = numpy.float64(line.split()[0])
      elif indizes[2] ==indizes[3]==-1:
        onedictionary[indizes[0],indizes[1],indizes[2],indizes[3]] = numpy.float64(line.split()[0])
      else:
        twodictionary[indizes[0],indizes[1],indizes[2],indizes[3]] = numpy.float64(line.split()[0])
  return (NORB,NELEC,E_nucc,onedictionary,twodictionary)

def hmatrix(NORB,onedictionary):
  global dtype
  H = numpy.zeros((NORB,NORB),dtype)
  for my in range (NORB):
    for ny in range (my+1):
      H[my,ny] = onedictionary[my,ny,-1,-1]
      H[ny,my] = H[my,ny]
  return H

def eigen(F):
  vecs = numpy.zeros((len(F),len(F)),dtype)
  vals,vecs = numpy.linalg.eig(F)
  idx = vals.argsort()
  vals = vals[idx]
  vecs = vecs[:,idx]
  print(idx)
  return vals,vecs

def pmatrix(NORB,NELEC,vecs):
  P = numpy.zeros((NORB,NORB))
  for my in range (NORB):
    for ny in range (NORB):
      for a in range (int(NELEC/2)):
        P[ny,my]+ = 2*vecs[my,a]*vecs[ny,a]
  return P

def dicmatrix(NORB,dictionary):
  dic = numpy.zeros((NORB,NORB,NORB,NORB))
  for key,value in dictionary.items():
    my = key[0]
    ny = key[1]
    la = key[2]
    si = key[3]
    dic[my,ny,la,si] = value
    dic[ny,my,la,si] = value
    dic[my,ny,si,la] = value
    dic[ny,my,si,la] = value
    dic[la,si,my,ny] = value
    dic[si,la,my,ny] = value
    dic[la,si,ny,my] = value
    dic[si,la,ny,my] = value
  return dic

def coulombmatrix(NORB,dic,P):
  c = numpy.zeros((NORB,NORB))
  for my in range (NORB):
    for ny in range(NORB):
      for la in range(NORB):
        for si in range(NORB):
          c[my,ny]+ = P[la,si]*dic[my,ny,la,si]
  return c

def exchangematrix(NORB,dic,P):
  e = numpy.zeros((NORB,NORB))
  for my in range (NORB):
    for ny in range(NORB):
      for la in range(NORB):
        for si in range(NORB):
          e[my,ny]+ = P[la,si]*0.5*dic[my,la,si,ny]
  return e

def energy(NORB,E_nucc,P,H,F):
  E = E_nucc
  for my in range(NORB):
    for ny in range(NORB):
      E+ = 0.5*P[my,ny]*(H[my,ny]+F[my,ny])
  return E

def electroninp():        #read electronaddinginput
  print ('How much electrons you want to add?')
  electronadd = int(input())
  return electronadd

def fcimaker(NORB,vecs,dic):
  fcidump = open('FCIDUMPNEW','w')
  for I in range (1,NORB+1):
    for J in range (1,I+1):
      for K in range (1,I+1):
        for L in range (1,K+1):
          if (I ==K and J<L): continue
          value = 0
          for my in range (NORB):
            for ny in range (NORB):
              for la in range (NORB):
                for si in range (NORB):
                  value+ = vecs[my,I-1]*vecs[ny,J-1]*vecs[la,K-1]*vecs[si,L-1]*dic[my,ny,la,si]
          fcidump.write('{} {} {} {}'.format(value,I,J,K,L))
  fcidump.close()
  return

def outsqr(title,mat,width = 15):
    frmt = ''.join(['{:>',str(width),'.',str(max(width-7,0)),'f}'])
    ifrmt = ''.join(['{:^',str(width),'d}'])
    headline = ''.join([ifrmt.format(i) for i in range(len(mat)+1)])
    outline = '\n'.join([''.join([ifrmt.format(i+1),''.join([frmt.format(val) for val in row])]) for i,row in enumerate(mat)])
    print ('\n'.join([title,headline,outline]))

if __name__ =='__main__':
  main()
