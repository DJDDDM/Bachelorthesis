#!/usr/bin/python3
import numpy
import scipy
from decimal import *
import pprint

def main(thresh=numpy.float64(10**-8)):
  global dtype
  dtype=numpy.dtype(numpy.float64)
  z0=numpy.float64(0)
  z05=numpy.float64(0.5)
  z2=numpy.float64(2)
  NORB=dic()[0]
  NELEC=dic()[1]
  print(NELEC,NORB)
  dictionary=dic()[2]
  P=numpy.zeros((NORB,NORB),dtype)
  F_old=numpy.zeros((NORB,NORB),dtype)
  for x in range(int(NELEC/2)):
    P[x,x]=z2
  H=hmatrix(NORB,dictionary)
  G=gmatrix(NORB,dictionary,P)
  iters=0
  E_0_old=z0
  E_old=z0
  F=numpy.add(H,G)
  vals,vecs=eigen(F)
  print (numpy.trace(F),'trace(F)')
  E=dictionary[-1,-1,-1,-1]
  for my in range(NORB):
    E=numpy.float64(E)+numpy.float64(P[my,my])*(H[my,my]+z05*G[my,my])
    for ny in range(my):
      E+=z2*P[my,ny]*(H[my,ny]+z05*G[my,ny])
  print (E,'-1iteration') 
  matprint(F)

  while True:
    P=pmatrix(NORB,NELEC,vecs)
    G=gmatrix(NORB,dictionary,P)
    F=H+G
    vals,vecs=eigen(F)
    E_0=z0
    for my in range(int(NELEC/2)): E_0+=F[my,my]
    E=dictionary[-1,-1,-1,-1]
    for my in range(NORB):
      E+=P[my,my]*(z05*F[my,my]+z05*H[my,my])
      for ny in range(my):
        E+=z2*P[my,ny]*(z05*F[my,ny]+z05*H[my,ny])
    print ('trace(F)',numpy.trace(F),'iteration:',iters,'Energy:',E)
    #print ('P=')
    #matprint(P)
    #print ('F=')
    matprint(F)
    #print ('vecs=')
    #matprint(vecs)
    #print ('vals=')
    #print(vals)
    #print (matprint(F))
    if abs(E_0_old-E_0)<thresh:break
    if abs(E_old-E)<10**-10:break
    E_old=E
    iters+=1
    E_0_old=E_0
    F_old=F
    if iters>2: break
    

def dic():
  dictionary={}
  with open ('FCIDUMP') as f:
    line=f.readline()
    line=line.strip()
    NORB=line.split('NORB=')[1]
    NORB=int(NORB.split(',')[0])
    NELEC=line.split('NELEC=')[1]
    NELEC=int(NELEC.split(',')[0])
    for dummy in range(1,4):
      next(f)
    for line in f:
      indizes=[]
      for i in range(1,5):
        indizes.append(int(line.split()[i])-1)
      dictionary[indizes[0],indizes[1],indizes[2],indizes[3]]=numpy.float64(line.split()[0])
  return (NORB,NELEC,dictionary)

def hmatrix(NORB,dictionary):
  global dtype
  H=numpy.zeros((NORB,NORB),dtype)
  for my in range (NORB):
    for ny in range (my+1):
      H[my,ny]=dictionary[my,ny,-1,-1]
      H[ny,my]=H[my,ny]
  return H

def gmatrix(NORB,dictionary,P):
  global dtype
  
  G=numpy.zeros((NORB,NORB),dtype)
  for my in range(NORB):
    for ny in range(my+1):
      G[my,ny]=numpy.float64(0)
      for si in range(NORB):
        for la in range(si):
          G[my,ny]+=numpy.float64(P[la,si])*2*numpy.float64(dictionary[dkey1(my,ny,si,la)])
          G[my,ny]+=numpy.float64(P[la,si])*numpy.float64(-1)*numpy.float64(dictionary[dkey2(my,ny,si,la)])
        la=si
        G[my,ny]+=numpy.float64(P[la,si])*1*numpy.float64(dictionary[dkey1(my,ny,si,la)])
        G[my,ny]+=numpy.float64(P[la,si])*numpy.float64(-0.5)*numpy.float64(dictionary[dkey2(my,ny,si,la)])
      G[ny,my]=G[my,ny]
  return G

def eigen(F):
  vecs=numpy.zeros((len(F),len(F)),dtype)
  vals,vecs=numpy.linalg.eig(F)
  idx=vals.argsort()
  vals=vals[idx]
  vecs=vecs[idx]
  return vals,vecs

def pmatrix(NORB,NELEC,vecs):
  P=numpy.zeros((NORB,NORB))
  for my in range (NORB):
    for ny in range (NORB):
      for a in range (int(NELEC/2)):
        P[ny,my]+=2*vecs[my,a]*vecs[ny,a]
  return P

def dkey1(my,ny,si,la):
  if my>si or (my==si and ny>=la):
    return (my,ny,si,la)
  else:
    return (si,la,my,ny)

def dkey2(my,ny,si,la):
  if my>=si:
    if ny>=la:
      return(my,si,ny,la)
    else:
      return(my,si,la,ny)
  else:
    if ny>=la:
      return(si,my,ny,la)
    else:
      return(si,my,la,ny)

def matprint(mat, fmt="g"):
  col_maxes = [max([len(("{:"+fmt+"}").format(x)) for x in col]) for col in mat.T]
  for x in mat:
    for i, y in enumerate(x):
      print(("{:"+str(col_maxes[i])+fmt+"}").format(y), end="  ")
    print("")

if __name__=='__main__':
  main()
