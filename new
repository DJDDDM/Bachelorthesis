#!/usr/bin/python3
    #Import Library
import numpy
from scipy.optimize import minimize

def main():
    #Data Dictionary
  NORB=dict()[0]
  NELEC=dict()[1]
  #NELEC+=-2
  print (NELEC,NORB)
  dictionary=dict()[2]
  P=numpy.zeros((NORB,NORB))
  H=hmatrix(NORB,dictionary)
  G=gmatrix(NORB,dictionary,P)
  F=numpy.zeros((NORB,NORB))
  P_cache=numpy.zeros((1000,NORB,NORB))
  F_cache=numpy.zeros((1000,NORB,NORB))
  E_old=0
  F_old=F
  P_old=P
  vecs_old=P
  E_old_old=0
  iters=0
  ediis_N=5
  
  for x in range(int((NELEC/2))):
    P[x,x]=2
  P_cache[0,:,:]=P

        #Control Loop
  while True:
    G=gmatrix(NORB,dictionary,P)
    if iters>10:
      F=ediis(ediis_N,P_cache,NORB,F_cache,iters,H)
      F_cache[iters,:,:]=F
    else:
      F=numpy.add(H,G)
      F_cache[iters,:,:]=F
    vals,vecs,E_0=eigenvector(F,NORB)
    print ('Epsilon:',E_0,'Iteration:',iters)
    if abs(E_0-E_old)<10**-5:  break
    E_old_old=E_old
    E_old=E_0
    P_old=P
    F_old=F
    vecs_old=vecs
    iters+=1
    P=pmatrix(NORB,NELEC,vecs)
    P_cache[iters,:,:]=P
  
  E=dictionary[-1,-1,-1,-1]
  for my in range (NORB):
    for ny in range (my):
      E+=2*P[my,ny]*(H[my,ny]+0.5*G[my,ny])
    ny=my
    E+=P[my,ny]*(H[my,ny]+0.5*G[my,ny])
  print ('Energy:',E,'after',iters,'Iterations')
  return E

def dict():
  dictionary={}
  with open ('FCIDUMP') as f:
    line=f.readline()
    line=line.strip()
    NORB=line.split('NORB=')[1]
    NORB=int(NORB.split(',')[0])
    NELEC=line.split('NELEC=')[1]
    NELEC=int(NELEC.split(',')[0])
    for dummy in range(1,4):
      next(f)
    for line in f:
      integral=float(line.split()[0])
      indizes=[int(line.split()[1])-1,int(line.split()[2])-1,int(line.split()[3])-1,int(line.split()[4])-1]
      dictionary[indizes[0],indizes[1],indizes[2],indizes[3]]=integral
  return (NORB,NELEC,dictionary)


def hmatrix(NORB,dictionary):
  H=numpy.zeros((NORB, NORB))
  for my in range (NORB):
    for ny in range (my+1):
      H[my,ny]=dictionary[my,ny,-1,-1]
  for ny in range (NORB):
    for my in range (ny):
      H[my,ny]=H[ny,my]
  return H

def gmatrix(NORB,dictionary,P):
  G=numpy.zeros((NORB,NORB))
  for my in range (NORB):
    for ny in range (my+1):
      for la in range(NORB):
        for si in range (la):
          G[my,ny]+=2*P[la,si]*dictionary[dkey1(my,ny,la,si)]
          G[my,ny]+=-1*P[la,si]*dictionary[dkey2(my,ny,la,si)]
        si=la
        G[my,ny]+=P[la,si]*dictionary[dkey1(my,ny,la,si)]
        G[my,ny]+=-0.5*P[la,si]*dictionary[dkey2(my,ny,la,si)]
  for ny in range (NORB):
    for my in range (ny):
      G[my,ny]=G[ny,my]
  return G

def eigenvector(F,NORB):
  E_0=0
  vals, vecs=numpy.linalg.eig(F)
  idx=vals.argsort()
  vals=vals[idx]
  vecs=vecs[idx]
  for a in range(len(vals)):
    E_0+=vals[a]
  return (vals,vecs,E_0)

def pmatrix(NORB,NELEC,vecs):
  P=numpy.zeros((NORB,NORB))
  for my in range (NORB):
    for ny in range (NORB):
      for a in range (int(NELEC/2)):
        P[my,ny]+=2*vecs[a,my]*vecs[a,ny]
  return P


def dkey1(my,ny,la,si):
  if my>la or (my==la and ny>=si):
    return(my,ny,la,si)
  else:
    return(la,si,my,ny)


def dkey2(my,ny,la,si):
  if my>=la:
    if ny>=si:
      return(my,la,ny,si)
    else:
      return(my,la,si,ny)
  if my<la:
    if ny>=si:
      return(la,my,ny,si)
    else:
      return(la,my,si,ny)

def fediis(c,P_cache,NORB,ediis_N,F_cache,iters,H):
  f_ediis=0
  for i in range (ediis_N):
    f_ediis+=c[i]*energy(P_cache[iters-i,:,:],NORB,F_cache[iters-i,:,:],H)
    for j in range (ediis_N):
      f_ediis-=c[i]*c[j]*numpy.trace(numpy.transpose(P_cache[iters-i,:,:]-P_cache[iters-j,:,:])*(F_cache[iters-i,:,:]-F_cache[iters-j,:,:]))
  return f_ediis

def energy(P,NORB,F,H):
  E=0
  for my in range (NORB):
    for ny in range (NORB):
      E+=0.5*P[ny,my]*(H[my,ny]+F[my,ny])
  return E

def constraint1(c,ediis_N):
  summe=1
  for i in range (ediis_N):
    summe-=c[i]
  return summe

def ediis(ediis_N,P_cache,NORB,F_cache,iters,H):
  b=(0.0,1.0)
  bnds =[]
  c=[]
  for i in range (ediis_N):
    bnds.append(b)
    c.append((1/ediis_N))
  bnds=tuple(bnds)
  con = {'type': 'eq', 'fun': constraint1, 'args': (ediis_N,)}
  sol=minimize(fediis,c,args=(P_cache,NORB,ediis_N,F_cache,iters,H),method='SLSQP',bounds=bnds,constraints=con)
  F=0
  for i in range (ediis_N):
    F+=sol.x[i]*F_cache[iters-i,:,:]
  return F


if __name__=='__main__':
  print (main())
